var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/%E8%BF%90%E8%A1%8Cshootergame%E7%A4%BA%E4%BE%8B%E9%A1%B9%E7%9B%AE/",title:"运行ShooterGame示例项目",description:"下载ShooterGame # Epic Games Launcher \u0026gt; Samples \u0026gt; Shooter Game 支持引擎版本 4.0 - 4.27 ，当前使用引擎版本 5.1.1 修改源码 # 退化类 # UMatineeCameraShake 已被 ULegacyCameraShake 替代 不再支持的宏 # PLATFORM_PS4 改法一: 定义该宏 # 在引擎代码中，紧接着 SWITCH 定义该宏 改法二: 屏蔽该宏的出现 # 条件运算符第二个和第三个操作数类型不一致, 且可以互相转换 # 参考 AController * 和 AActor * 可以相互转换，此处有歧义 Source/ShooterGame/Private/Player/ShooterCharacter.cpp:322 运行效果 # ",content:"下载ShooterGame # Epic Games Launcher \u0026gt; Samples \u0026gt; Shooter Game 支持引擎版本 4.0 - 4.27 ，当前使用引擎版本 5.1.1 修改源码 # 退化类 # UMatineeCameraShake 已被 ULegacyCameraShake 替代 不再支持的宏 # PLATFORM_PS4 改法一: 定义该宏 # 在引擎代码中，紧接着 SWITCH 定义该宏 改法二: 屏蔽该宏的出现 # 条件运算符第二个和第三个操作数类型不一致, 且可以互相转换 # 参考 AController * 和 AActor * 可以相互转换，此处有歧义 Source/ShooterGame/Private/Player/ShooterCharacter.cpp:322 运行效果 # "}),e.add({id:1,href:"/docs/%E5%88%86%E4%BA%AB/emacs/org-mode/",title:"org-mode",description:"便签 # The Org Manual 样式 # 删除线 +Content+ 下划线 ox-hugo转markdown存在问题 _Content_ 文本块 =test= ~test~ 斜体 /test/ 加粗 *test* 分隔线 ----- 标题 # 标题间移动 # - 上一个 C-c C-p 下一个 C-c C-n 去到上级标题 C-c C-u 同级标题间移动 上一个 C-c C-b 同级标题间移动 下一个 C-c C-f 创建标题 # - 同级标题 C-RET 同级标题 / 列表项 M-RET 同级TODO标题 M-S-RET 标题、列表项转换 # - 标题转换为列表项 C-c - 文本、列表项 转换为标题 C-c * 升降级 # - 标题、列表项 升降级 M-LEFT / M-RIGHT 子树 # - 删除子树 C-c C-x C-w 拷贝子树 C-c C-x M-w 升降级 M-S-LEFT / M-S-RIGHT 标题状态切换 # - TODO标题状态切换 C-c C-t S-LEFT / S-RIGHT \u0026gt; 普通标题 \u0026gt; TODO \u0026gt; DONE 显示 # - 进入预览模式，显示一级标题 C-c C-j 标题展开 S-TAB \u0026gt; 只展开一级标题 \u0026gt; 展开所有标题 \u0026gt; 展开全部内容 模板 # Structure Templates - 快捷键 C-c C-, \u0026lt;s TAB 不再支持 函数 org-insert-structure-template 模板样式 # 代码框 填写编程语言 // C++样式 #+begin_src \u0026lt;language\u0026gt; #+end_src 文本框 文本框样式 #+begin_example #+end_example quote quote样式 #+begin_quote #+end_quote 代码块编辑 # - 插入代码框 C-c C-, s 在新窗口编辑代码 C-c ' 保存修改 C-x C-s 关闭编辑窗口(未保存丢失) C-c C-k 执行 C-c C-c 计时 # 精确到分钟 - 开始 C-c C-x C-i 停止 C-c C-x C-o 链接 # - 插入 C-c C-l 打开 C-c C-o 显示/ 隐藏 图片 C-c C-x C-v 链接 # [[http://www.",content:"便签 # The Org Manual 样式 # 删除线 +Content+ 下划线 ox-hugo转markdown存在问题 _Content_ 文本块 =test= ~test~ 斜体 /test/ 加粗 *test* 分隔线 ----- 标题 # 标题间移动 # - 上一个 C-c C-p 下一个 C-c C-n 去到上级标题 C-c C-u 同级标题间移动 上一个 C-c C-b 同级标题间移动 下一个 C-c C-f 创建标题 # - 同级标题 C-RET 同级标题 / 列表项 M-RET 同级TODO标题 M-S-RET 标题、列表项转换 # - 标题转换为列表项 C-c - 文本、列表项 转换为标题 C-c * 升降级 # - 标题、列表项 升降级 M-LEFT / M-RIGHT 子树 # - 删除子树 C-c C-x C-w 拷贝子树 C-c C-x M-w 升降级 M-S-LEFT / M-S-RIGHT 标题状态切换 # - TODO标题状态切换 C-c C-t S-LEFT / S-RIGHT \u0026gt; 普通标题 \u0026gt; TODO \u0026gt; DONE 显示 # - 进入预览模式，显示一级标题 C-c C-j 标题展开 S-TAB \u0026gt; 只展开一级标题 \u0026gt; 展开所有标题 \u0026gt; 展开全部内容 模板 # Structure Templates - 快捷键 C-c C-, \u0026lt;s TAB 不再支持 函数 org-insert-structure-template 模板样式 # 代码框 填写编程语言 // C++样式 #+begin_src \u0026lt;language\u0026gt; #+end_src 文本框 文本框样式 #+begin_example #+end_example quote quote样式 #+begin_quote #+end_quote 代码块编辑 # - 插入代码框 C-c C-, s 在新窗口编辑代码 C-c ' 保存修改 C-x C-s 关闭编辑窗口(未保存丢失) C-c C-k 执行 C-c C-c 计时 # 精确到分钟 - 开始 C-c C-x C-i 停止 C-c C-x C-o 链接 # - 插入 C-c C-l 打开 C-c C-o 显示/ 隐藏 图片 C-c C-x C-v 链接 # [[http://www.baidu.com][百度]] 文件 # [[file:xxx.txt][描述]] 图片 # #+ATTR_ORG: :width 400 #+ATTR_HTML: :width 500 [[file:pic/xxxx.png]] org文件导出 # html # - 生成文件并打开 C-c C-e h o markdown # - 生成文件并打开 C-c C-e m o 菜单项添加markdown选项 customize-option \u0026gt; org-export-backends \u0026gt; 勾选org-markdown 安装markdown-mode 日程管理 # agenda 搜索路径保存在列表org-agenda-files中，不支持递归搜索 # 查看 # - 日程菜单 org-agenda 快捷键(自定义) C-c a 切换当日安排 / 本周安排 d / w 添加任务 # - 开始 C-c C-s 结束 C-c C-d 表格 # 快捷键 # - M-LEFT / M-RIGHT 移动当前列 M-UP / M-DOWN 移动当前行 C-c - 在当前行下方加分割线 C-c RET 在当前行下方加分割线 M-a 移动到cell开始 M-e 移动到cell末尾 TAB 下一个cell S-TAB 上一个cell C-c C-c 格式化表格 M-S-LEFT 删除当前列 M-S-RIGHT 左侧新建列 计算 # 快捷键 查询单元所在行列 C-c ? 显示表格相对行列 C-c } 行累加 # 在公式所在行C-c C-c 待累加数值 3 2 10 22 累加 37 使用插件按类别统计 # orgtbl-aggregate 类别 金额 项目 水果 10 苹果 水果 8 香蕉 日化 12 洗手液 类别 sum(金额) 水果 18 日化 12 缩进 # 第一种: 文本不含空格，但org-mode下显示缩进 # indent mode 使能mode (org-indent-mode t) 全局设置 (setq org-startup-indented t) 文件选项 #+STARTUP：indent 第二种: 换行时自动缩进 # hard indentation 全局设置 (setq org-adapt-indentation t) 隐藏前缀星号 # 全局设置 (setq org-hide-leading-stars t) 文件选项 #+STARTUP: hidestars 选项设置 # 文章目录 # Table of Contents 关闭toc #+OPTIONS: toc:nil 指定toc显示层级 #+TOC: headlines 2 自动为标题添加标号 # 关闭 #+OPTIONS num:nil 上下标 # a_b a^b 关闭 #+OPTIONS: ^:nil 使用{}转义 #+OPTIONS ^:{} 示例 a_{b} a^{b} 选项合并 #+OPTIONS: toc:nil ^:{} 显示 # 一级标题预览 #+STARTUP: overview 显示所有内容 #+STARTUP: showall 选项合并 #+STARTUP: showall hidestars "}),e.add({id:2,href:"/docs/%E5%88%86%E4%BA%AB/macos/%E7%BB%88%E7%AB%AF/",title:"终端",description:"iTerm2 # 官网下载 窗口管理 # 快捷键 操作 Command-W 关闭窗口 分屏 # 快捷键 操作 Command-D 左右分屏 Command-Shift-D 上下分屏 Command-[ 切换 Command-] Option-Command-UP 根据方向键切换 Option-Command-Down Option-Command-Left Option-Command-Right 标签页 # 快捷键 操作 Command-T 新建标签页 Command-NUM 根据标号切换标签页 Command-Shift-[ 切换标签页 Command-Shift-] Command-Left 根据方向键切换标签页窗口 Command-Right 状态栏 # Status Bar 使能 # Preferences \u0026gt; Profiles \u0026gt; Session 勾选 Status bar enabled 点击 Configure Status Bar , 选择显示组件 设置状态栏位置 # Preferences \u0026gt; Appearence \u0026gt; General \u0026gt; Status bar location 选择 Bottom 配色 # 下载配色 # - 官方提供的配色 : lovelace Afterglow Dracula 导入配色 # Preferences \u0026gt; Profiles \u0026gt; Color \u0026gt; Color Presets \u0026gt; Import 设置窗口大小 # Preferences \u0026gt; Profiles \u0026gt; Window 设置 Columns 和 Rows 透明度 # Preferences \u0026gt; Profiles \u0026gt; Window \u0026gt; Transparency 选择 3 字体 # 下载字体 # - Consolas Victor Mono 配置 # Preferences \u0026gt; Profiles \u0026gt; Text \u0026gt; Font 选择 Victor Mono 字号选择 14 Homebrew # 官网 使用中科大 USTC 提供的安装脚本和软件源 参考 安装Homebrew # /bin/bash -c \u0026quot;$(curl -fsSL https://mirrors.",content:"iTerm2 # 官网下载 窗口管理 # 快捷键 操作 Command-W 关闭窗口 分屏 # 快捷键 操作 Command-D 左右分屏 Command-Shift-D 上下分屏 Command-[ 切换 Command-] Option-Command-UP 根据方向键切换 Option-Command-Down Option-Command-Left Option-Command-Right 标签页 # 快捷键 操作 Command-T 新建标签页 Command-NUM 根据标号切换标签页 Command-Shift-[ 切换标签页 Command-Shift-] Command-Left 根据方向键切换标签页窗口 Command-Right 状态栏 # Status Bar 使能 # Preferences \u0026gt; Profiles \u0026gt; Session 勾选 Status bar enabled 点击 Configure Status Bar , 选择显示组件 设置状态栏位置 # Preferences \u0026gt; Appearence \u0026gt; General \u0026gt; Status bar location 选择 Bottom 配色 # 下载配色 # - 官方提供的配色 : lovelace Afterglow Dracula 导入配色 # Preferences \u0026gt; Profiles \u0026gt; Color \u0026gt; Color Presets \u0026gt; Import 设置窗口大小 # Preferences \u0026gt; Profiles \u0026gt; Window 设置 Columns 和 Rows 透明度 # Preferences \u0026gt; Profiles \u0026gt; Window \u0026gt; Transparency 选择 3 字体 # 下载字体 # - Consolas Victor Mono 配置 # Preferences \u0026gt; Profiles \u0026gt; Text \u0026gt; Font 选择 Victor Mono 字号选择 14 Homebrew # 官网 使用中科大 USTC 提供的安装脚本和软件源 参考 安装Homebrew # /bin/bash -c \u0026quot;$(curl -fsSL https://mirrors.ustc.edu.cn/misc/brew-install.sh)\u0026quot; 设置源 # 源代码仓库 export HOMEBREW_BREW_GIT_REMOTE=\u0026quot;https://mirrors.ustc.edu.cn/brew.git\u0026quot; 预编译二进制软件包与软件包元数据文件 export HOMEBREW_BOTTLE_DOMAIN=\u0026quot;https://mirrors.ustc.edu.cn/homebrew-bottles\u0026quot; export HOMEBREW_API_DOMAIN=\u0026quot;https://mirrors.ustc.edu.cn/homebrew-bottles/api\u0026quot; 核心软件仓库 export HOMEBREW_CORE_GIT_REMOTE=\u0026quot;https://mirrors.ustc.edu.cn/homebrew-core.git\u0026quot; 写入配置文件, 重新导入 vi ～/.zshrc source ～/.zshrc 管理软件 # 默认下载源码在本地编译安装，通常是不带界面的命令行工具和第三方库; 使用cask选项则安装编译好的软件包，通常是一些带界面的软件 安装/卸载 # brew install --cask emacs # 安装 brew uninstall --cask emacs # 卸载 brew install \u0026lt;package\u0026gt; brew uninstall \u0026lt;package\u0026gt; brew autoremove # 卸载未使用依赖 查看 # brew list # 当前管理的程序 brew search \u0026lt;package\u0026gt; # 查找 brew info \u0026lt;package\u0026gt; # 查看包 代理 # Privoxy 安装Privoxy # 依赖pcre brew install privoxy 配置Privoxy # Privoxy使用端口号8118 vi /usr/local/etc/privoxy/config # 在文件末尾添加以下代码 listen-address 0.0.0.0:8118 forward-socks5 / localhost:1080 . 手动启动Privoxy sudo /usr/local/sbin/privoxy /usr/local/etc/privoxy/config 查看端口是否被监听 netstat -na | grep 8118 为终端配置代理 # 查询本地代理使用端口 系统偏好设置 \u0026gt; 网络 \u0026gt; Wi-Fi \u0026gt; 高级 \u0026gt; 代理 \u0026gt; 网页代理 / 安全网页代理 配置环境变量 vi ~/.zshrc # 添加以下内容 # 使用本地代理使用端口替换1949 export http_proxy='http://localhost:1949' export https_proxy=$http_proxy # 重载配置文件 source ~/.zshrc oh-my-zsh # 官网 安装oh-my-zsh # sh -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026quot; 设置主题 # 第三方主题 # 下载Dracula主题 ln -s Dracula/zsh/dracula.zsh-theme ~/.oh-my-zsh/themes/ 设置主题 vi ~/.zshrc # 屏蔽默认主题, 添加以下内容 # ZSH_THEME=\u0026quot;robbyrussell\u0026quot; ZSH_THEME=\u0026quot;dracula\u0026quot; # 载入配置 source ~/.zshrc 官方主题 # 下载时已存放在本地 官方主题展示 使用随机主题 ZSH_THEME=\u0026quot;random\u0026quot; # 随机 "}),e.add({id:3,href:"/docs/%E5%88%86%E4%BA%AB/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/bash/",title:"Shell脚本",description:"花括号的使用 # 可以使用花括号定义集合集合，集合内有多个可以枚举的项，使用逗号分隔 {项1, 项2, 项3...} 遇到花括号时，会对集合进行展开，将集合内的每一项与外面的字符串进行组合，然后返回全部组合项 xxx.conf{,.bak} 展开为 xxx.conf xxx.conf.bak 和前方的命令配合起来，就可以起到多个入参的效果 cp xxx.conf{,.bak} # cp xxx.conf xxx.conf.bak 接受多个参数的命令都可以这样使用，但前提是这些参数有共同部分，或者有某些规律 echo cp mkdir mv for mkdir app{,.bak} echo {1..5} echo {a..z} echo {001..10} # 前导0 echo {001..10..2} # 前导0 + 步进 echo {a..z}{0..9} # 组合：26 * 10 tr命令 # runoob 去除引号 # tr -d '\u0026quot;' 使用sed sed 's/\\\u0026quot;//g' sed命令 # macOS runoob 安装gsed # brew install gsed 匹配行打印 # p gsed -n \u0026quot;/abc/p\u0026quot; file 修改源文件 # -i gsed -i \u0026quot;/abc/d\u0026quot; file # 匹配行删除 匹配行删除 # d gsed \u0026quot;/abc/d\u0026quot; file 匹配行文本替换 # s 首个匹配项 gsed \u0026quot;s/abc/edf/\u0026quot; file 所有匹配项 g gsed \u0026quot;s/abc/edf/g\u0026quot; file awk命令 # 指定分隔符，打印第3个参数 # awk -F ',' '{print $3}' file命令 # 查看文件编码 # file FILE echo命令 # 输出单行 # var=\u0026quot;hello world!",content:"花括号的使用 # 可以使用花括号定义集合集合，集合内有多个可以枚举的项，使用逗号分隔 {项1, 项2, 项3...} 遇到花括号时，会对集合进行展开，将集合内的每一项与外面的字符串进行组合，然后返回全部组合项 xxx.conf{,.bak} 展开为 xxx.conf xxx.conf.bak 和前方的命令配合起来，就可以起到多个入参的效果 cp xxx.conf{,.bak} # cp xxx.conf xxx.conf.bak 接受多个参数的命令都可以这样使用，但前提是这些参数有共同部分，或者有某些规律 echo cp mkdir mv for mkdir app{,.bak} echo {1..5} echo {a..z} echo {001..10} # 前导0 echo {001..10..2} # 前导0 + 步进 echo {a..z}{0..9} # 组合：26 * 10 tr命令 # runoob 去除引号 # tr -d '\u0026quot;' 使用sed sed 's/\\\u0026quot;//g' sed命令 # macOS runoob 安装gsed # brew install gsed 匹配行打印 # p gsed -n \u0026quot;/abc/p\u0026quot; file 修改源文件 # -i gsed -i \u0026quot;/abc/d\u0026quot; file # 匹配行删除 匹配行删除 # d gsed \u0026quot;/abc/d\u0026quot; file 匹配行文本替换 # s 首个匹配项 gsed \u0026quot;s/abc/edf/\u0026quot; file 所有匹配项 g gsed \u0026quot;s/abc/edf/g\u0026quot; file awk命令 # 指定分隔符，打印第3个参数 # awk -F ',' '{print $3}' file命令 # 查看文件编码 # file FILE echo命令 # 输出单行 # var=\u0026quot;hello world!\u0026quot; echo $var 输出多行 # echo -e \u0026quot;\\nhello world!\\n\u0026quot; head命令 # 安装coreutils # brew install coreutils 输出文件去掉末尾4行的文本 # ghead -n -4 xx.txt "}),e.add({id:4,href:"/docs/brick/%E7%BB%88%E7%AB%AF/",title:"终端",description:"便签 # 介绍CLI，Terminal，Shell和Prompt视频 shell概念 # 接口 shell，和core相区分，是操作系统的外层。通过Shell程序，可以使用系统服务或其他程序提供的功能。 根据操作系统类别和操作类型，shell可以分为图形shell（图形用户界面）和命令行shell（命令行界面）。 CLI Command-Line Interface 命令行界面 通过文本命令和计算机交互 GUI Graphical User Interface 图形用户界面 通过鼠标操作 早期的操作系统并没有图形用户接口，我们通常说的shell，指的是命令行shel。 终端程序 # Terminal Wrapper Program 在终端输入文本命令 终端程序 说明 iTerm MacOS Windows Terminal Windows Gnome Terminal 使用Gnome作为桌面的Linux自带的终端程序 Hyper Warp 目前MacOS；自动补全，鼠标交互，内置工作流，AI功能 Alacrity 命令解释器 # Shell 程序 终端中运行的程序。接受命令，然后解释并执行。 Shell启动时自动读取配置文件。 Shell 说明 sh Bourne Shell UNIX上的标准shell bash Bourne-Again Shell GNU开发；Linux默认 不完全兼容sh shell，对一些命令和参数进行了扩展 配置文件 ~/.bash_profile zsh 19年之前MacOS默认Bash；之后使用zsh 配置文件 ~/zshrc 第三方框架oh-my-zsh提供其他功能 phish 脚本语言 # 需要解释器，每次运行时都需要解释。 - JavaScript PHP Lua Python C# Shell脚本 # 开发语言 Shell Script 由一连串Shell命令组成，可以指定解释脚本的Shell程序。 命令提示符 # Prompt 命令解释器提供并在终端显示，如当前路径和git信息。 类别 第三方提示 Powerline Starship Power Level 10K Spaceship 第三方框架 oh-my-zsh 提供各种promots，configuration options，aliases，plugins。支持自定义prompt，调整Shell行为 查看Shell信息 # 命令解释器 当前使用的Shell echo $SHELL echo $0 已安装Shell cat /etc/shells Shell操作 # 切换Shell程序 重新打开终端生效 chsh -s /bin/bash 不修改SHELL环境变量 zsh 手动读取配置文件 zsh source ~/.",content:"便签 # 介绍CLI，Terminal，Shell和Prompt视频 shell概念 # 接口 shell，和core相区分，是操作系统的外层。通过Shell程序，可以使用系统服务或其他程序提供的功能。 根据操作系统类别和操作类型，shell可以分为图形shell（图形用户界面）和命令行shell（命令行界面）。 CLI Command-Line Interface 命令行界面 通过文本命令和计算机交互 GUI Graphical User Interface 图形用户界面 通过鼠标操作 早期的操作系统并没有图形用户接口，我们通常说的shell，指的是命令行shel。 终端程序 # Terminal Wrapper Program 在终端输入文本命令 终端程序 说明 iTerm MacOS Windows Terminal Windows Gnome Terminal 使用Gnome作为桌面的Linux自带的终端程序 Hyper Warp 目前MacOS；自动补全，鼠标交互，内置工作流，AI功能 Alacrity 命令解释器 # Shell 程序 终端中运行的程序。接受命令，然后解释并执行。 Shell启动时自动读取配置文件。 Shell 说明 sh Bourne Shell UNIX上的标准shell bash Bourne-Again Shell GNU开发；Linux默认 不完全兼容sh shell，对一些命令和参数进行了扩展 配置文件 ~/.bash_profile zsh 19年之前MacOS默认Bash；之后使用zsh 配置文件 ~/zshrc 第三方框架oh-my-zsh提供其他功能 phish 脚本语言 # 需要解释器，每次运行时都需要解释。 - JavaScript PHP Lua Python C# Shell脚本 # 开发语言 Shell Script 由一连串Shell命令组成，可以指定解释脚本的Shell程序。 命令提示符 # Prompt 命令解释器提供并在终端显示，如当前路径和git信息。 类别 第三方提示 Powerline Starship Power Level 10K Spaceship 第三方框架 oh-my-zsh 提供各种promots，configuration options，aliases，plugins。支持自定义prompt，调整Shell行为 查看Shell信息 # 命令解释器 当前使用的Shell echo $SHELL echo $0 已安装Shell cat /etc/shells Shell操作 # 切换Shell程序 重新打开终端生效 chsh -s /bin/bash 不修改SHELL环境变量 zsh 手动读取配置文件 zsh source ~/.zshrc 指定Shell脚本的命令解释器 #!/bin/bash "}),e.add({id:5,href:"/docs/%E5%88%86%E4%BA%AB/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git/",title:"Git",description:"代码管理, 版本控制 安装 # macOS 方法一: Xcode自带 # 方法二: 使用homebrew安装较新版本 # brew install git 方法三: 下载源码, 编译安装 # 官网下载git-2.41.0.tar.gz make install 验证 # git -v 配置 # 查看Git配置 git config --list 配置Git账户 git config --global user.name \u0026quot;enjoy61\u0026quot; git config --global user.email \u0026quot;enjoy61@protonmail.com\u0026quot; 配置SSH 生成密钥 ssh-keygen cat ~/.ssh/id_rsa.pub 拷贝公钥到Github 代理 设置 # 使用代理端口替换1949 git config --global https.proxy https://localhost:1949 git config --global http.proxy http://localhost:1949 取消 git config --global --unset http.proxy git config --global --unset https.",content:"代码管理, 版本控制 安装 # macOS 方法一: Xcode自带 # 方法二: 使用homebrew安装较新版本 # brew install git 方法三: 下载源码, 编译安装 # 官网下载git-2.41.0.tar.gz make install 验证 # git -v 配置 # 查看Git配置 git config --list 配置Git账户 git config --global user.name \u0026quot;enjoy61\u0026quot; git config --global user.email \u0026quot;enjoy61@protonmail.com\u0026quot; 配置SSH 生成密钥 ssh-keygen cat ~/.ssh/id_rsa.pub 拷贝公钥到Github 代理 设置 # 使用代理端口替换1949 git config --global https.proxy https://localhost:1949 git config --global http.proxy http://localhost:1949 取消 git config --global --unset http.proxy git config --global --unset https.proxy 初始化项目 # 已在Github创建项目 场景一: 从Github克隆项目，上游信息自动配置 # git clone git@github.com:enjoy61/even.git 查看远端信息 # git remote -v 场景二: 手动配置上游信息 # git init git remote add cute git@github.com:enjoy61/even.git # cute为上游别名 git fetch cute # 拉取上游内容，和Github项目同步 场景三: 首次提交本地项目到远端 # git init git add README.md # 添加管理文件 git commit -m \u0026quot;first commit\u0026quot; git branch -M main git remote add origin git@github.com:enjoy61/even.git git push -u origin main 子模块管理 # 添加子模块 # git submodule add git@github.com:enjoy61/hugo-theme-even.git themes/even 从远端拉取项目时亦拉取子模块项目 # git clone --recursive git@github.com:enjoy61/even.git 设置项目同步链接 # SSH git remote set-url cute git@github.com:enjoy61/even.git HTTPS push时需要验证，Github不再支持用户名和密码 git remote set-url cute https://github.com/enjoy61/even.git 文件托管 # 添加 # git add file # 指定文件 git add -A # 所有文件 删除 # git rm file 查看托管文件状态 # git diff 查看项目内文件状态 # git status 提交 # 提交当前改动 # git commit -m \u0026quot;first commit\u0026quot; 推送到远端 # git push 查看提交记录 # git log 删除历史提交 # # 查看提交记录 git log # 最新提交 F E D C B，要删除F和E，记录D # 设置回溯目标 git rebase -i D # 将F E的pick改为drop # 检查设置是否生效 git log # 查看当前提交 D C B # 同步到远端 git push cute master --force # 上游cute 分支master 存在多个文件添加/删除/修改，在上次提交的基础上再次提交 # 不建议如此操作，提交前建议检阅改动 项目文件夹一式两份，A和A.BAK, 项目新版本B 删除文件夹A内所有代码 不会删除.git，提交和同步记录均保留 rm -rf A/* 将B内的所有文件拷贝到A 不会拷贝.git cp -r B A 打开文件夹A, 再次提交 git add -A git commit -m \u0026quot;Comments\u0026quot; git push 提交规范 # \u0026lt;type\u0026gt;(\u0026lt;scope\u0026gt;): \u0026lt;subject\u0026gt; \u0026lt;body\u0026gt; \u0026lt;footer\u0026gt; 标题行 # 必填 类型 # type 标识 feat feature 新功能 fix 修复bug docs 文档 style 格式，如.clang-format refactor 重构 test 测试用例 build 项目构建和依赖项 revert 回退 ci 持续集成 perf 性能优化 merge 代码合并 sync 同步主线或分支的bug chore 其他类型 release 新版本发布 workflow 工作流 受到提交影响的范围 # scope 概述 # subject 动词开头 如果用英文，使用第一人称现在时，首字母小写 结尾不加句号 正文 # body 具体修改内容, 可多行 页脚注释 # footer 备注 分支 # 当前分支和分支列表 # git branch -a 切换分支 # git checkout main 创建分支 # git branch master 本地创建新分支后, 同步到远端 # git push --set-upstream origin master 创建并切换 # git checkout -b iss53 删除分支 # 本地 git branch -d iss51 上游 git push origin -d iss51 重命名分支 # 未推送到远端, 重命名即可 # git branch -m oldName newName 已推送过远端 # 重命名本地分支 git branch -m oldName newName 删除远端分支 git push --delete origin oldName 将本地分支推送到远端 git push origin newName 将本地分支和远端分支关联 git branch --set-upstream-to origin/newName 分支合并 # 合并过程中可能会产生冲突 git-scm 在iss53分支上开发新功能 git checkout master # 主分支 git checkout -b iss53 vim index.html git commit -a -m 'added a new footer [issue 53]' 在hotfix分支上解决问题 git checkout master # 主分支 git checkout -b hotfix vim index.html git commit -a -m 'fixed the broken email address' 在主分支上合并解决方案，删除hotfix分支 git checkout master git merge hotfix git branch -d hotfix 继续在分支iss53上开发新功能 git checkout iss53 vim index.html git commit -a -m 'finished the new footer [issue 53]' 合并新功能到主分支，删除iss53分支 git checkout master git merge iss53 git branch -d iss53 "}),e.add({id:6,href:"/docs/%E5%88%86%E4%BA%AB/hugo/%E4%BD%BF%E7%94%A8hugo+github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/",title:"使用Hugo+Github搭建静态博客",description:"说明 # - Github Pages 使用Github提供的免费服务部署静态博客 Hugo 本地构建静态网页 anubis 主题 安装Hugo # Github 官网 方法一: 使用go安装 # Windows 安装go 官网下载 环境变量 # go export PATH=/usr/local/go/bin:$PATH export GOROOT=/usr/local/go export GOPATH=/Users/USERNAME/go export GOBIN=/Users/USERNAME/go/bin # go安装的软件 export PATH=$GOBIN:$PATH 安装hugo 如若遇上网络不佳, 配置代理 go env -w GOPROXY=https://goproxy.cn,direct go env -w GOSUMDB=off 安装并验证 go install github.com/gohugoio/hugo@latest hugo env -v 部分主题需用hugo_extended提供的支持 方法二: 使用homebrew安装 # macOS brew install hugo 创建站点项目 # 新建站点 hugo new site /site/path 站点项目结构 文件 说明 config.",content:"说明 # - Github Pages 使用Github提供的免费服务部署静态博客 Hugo 本地构建静态网页 anubis 主题 安装Hugo # Github 官网 方法一: 使用go安装 # Windows 安装go 官网下载 环境变量 # go export PATH=/usr/local/go/bin:$PATH export GOROOT=/usr/local/go export GOPATH=/Users/USERNAME/go export GOBIN=/Users/USERNAME/go/bin # go安装的软件 export PATH=$GOBIN:$PATH 安装hugo 如若遇上网络不佳, 配置代理 go env -w GOPROXY=https://goproxy.cn,direct go env -w GOSUMDB=off 安装并验证 go install github.com/gohugoio/hugo@latest hugo env -v 部分主题需用hugo_extended提供的支持 方法二: 使用homebrew安装 # macOS brew install hugo 创建站点项目 # 新建站点 hugo new site /site/path 站点项目结构 文件 说明 config.toml 配置文件；yaml格式也可以 content 存放blog；支持md和org theme 存放主题 public 生成的静态页面；同步到Github项目 archetypes 文章模版 新建博客 所在目录为 ./content/post hugo new post/first-blog.org 使用主题anubis # anubis on hugo anubis on github 将主题作为项目子模块 git init git submodule add https://github.com/mitrichius/hugo-theme-anubis.git themes/anubis 使用anubis提供的模板 ./themes/anubis/exampleSite/ cp themes/anubis/exampleSite/config.toml . cp themes/anubis/exampleSite/content/. content 主题说明 提供标签(tags)和分类(categories)功能, 提供文章列表(archives) 文章存放到content/post目录下 文章模板 yaml \u0026mdash; author: \u0026ldquo;author\u0026rdquo; title: \u0026ldquo;article title\u0026rdquo; date: \u0026ldquo;2023-03-17\u0026rdquo; description: \u0026ldquo;article description\u0026rdquo; tags: [ \u0026ldquo;tag-1\u0026rdquo;, \u0026ldquo;tag-2\u0026rdquo;, ] categories: [ \u0026ldquo;category\u0026rdquo;, ] \u0026mdash; 简单介绍 \u0026lt;!\u0026ndash;more\u0026ndash;\u0026gt; 正文 构建静态网页 # 选项 说明 构建或测试 \u0026ndash;theme=anubis 设置主题 -t anubis both \u0026ndash;watch 修改文件后自动刷新浏览器 -w server \u0026ndash;buildDrafts 包括标记为draft的笔记 -D both \u0026ndash;buildFuture 包括新发布笔记；检查date选项 -F both \u0026ndash;baseUrl=\u0026quot;http://enjoy61.github.io/\u0026quot; 未配置编译，GithubPage部署会丢失样式 both \u0026ndash;cleanDestinationDir 将public文件夹中不再使用的文件删除 hugo 本地测试 # 查询server选项 参考 hugo help server 访问 http://localhost:1313/ hugo server --theme=anubis --watch # hugo server 构建静态页面 # 生成文件路径 ./public/ hugo --theme=anubis --baseUrl=\u0026quot;https://enjoy61.github.io/\u0026quot; # hugo 在Github创建项目 # 创建仓库 仓库名为enjoy61.github.io 使用Github Pages提供的免费服务需公开项目 测试服务: 为github设置主题 添加_config.yaml文件 remote_theme: pages-themes/midnight@v0.2.0 将public文件夹提交到仓库 "}),e.add({id:7,href:"/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/%E5%88%9D%E5%A7%8B%E5%8C%96shootthemup%E9%A1%B9%E7%9B%AE/",title:"初始化ShootThemUp项目",description:"说明 # 虚幻编辑器 将 ShooterGame 作为内容包，基于此开发 ShootThemUp 。好比室内设计师提供游戏资料，我们在此之上开发游戏。 创建ShootThemUp项目 # Blank Blueprint 配置ShootThemUp # 添加版权信息 # 项目设置 \u0026gt; Project \u0026gt; Description \u0026gt; Legal \u0026gt; Copyright Notice Shoot Them Up Game, All Rights Reserved. 关卡设置 # 添加关卡文件夹 Content/Levels 创建关卡 新建关卡 选择 Basic 保存到Content/Levels/，命名为DefaultMap 设置 EditorStartupMap 和 GameDefaultMap 使用 DefaultMap 项目设置 \u0026gt; Project \u0026gt; Maps \u0026amp; Modes 从ShooterGame导入资产 # ShooterGame导出 # 打开ShooterGame项目 \u0026gt; 在内容浏览器选中Content/Animations/TTP_Animations，右键 \u0026gt; Migrate 取消Sounds勾选 默认勾选的文件夹里的内容都与 TTP_Animations 相关 保存到 ShootThemUp/Content 目录下 不能直接迁移到 5.",content:"说明 # 虚幻编辑器 将 ShooterGame 作为内容包，基于此开发 ShootThemUp 。好比室内设计师提供游戏资料，我们在此之上开发游戏。 创建ShootThemUp项目 # Blank Blueprint 配置ShootThemUp # 添加版权信息 # 项目设置 \u0026gt; Project \u0026gt; Description \u0026gt; Legal \u0026gt; Copyright Notice Shoot Them Up Game, All Rights Reserved. 关卡设置 # 添加关卡文件夹 Content/Levels 创建关卡 新建关卡 选择 Basic 保存到Content/Levels/，命名为DefaultMap 设置 EditorStartupMap 和 GameDefaultMap 使用 DefaultMap 项目设置 \u0026gt; Project \u0026gt; Maps \u0026amp; Modes 从ShooterGame导入资产 # ShooterGame导出 # 打开ShooterGame项目 \u0026gt; 在内容浏览器选中Content/Animations/TTP_Animations，右键 \u0026gt; Migrate 取消Sounds勾选 默认勾选的文件夹里的内容都与 TTP_Animations 相关 保存到 ShootThemUp/Content 目录下 不能直接迁移到 5.1.1/ShootThemUp/Content/ExternalContent ，虚幻引擎会检查目录，要求这些资产的上级目录是 Content ，即使根目录是 Content 也无法通过检查 ShootThemUp导入 # 添加外部资产文件夹和本章资产文件夹 Content/ExternalContent Content/ExternalContent/Animation 通过虚幻编辑器，将 Content 目录下的 Animations Characters Environment 移动到 ExternalContent/Animation 目录下 不能在外部直接将三个文件夹移动到目的文件夹中，会导致资产之间的相互引用路径出错 为 ExternalContent 设置文件夹颜色 选中Content/ExternalContent，右键 \u0026gt; Set Color 为 ExternalContent/Animation 设置文件夹颜色 效果图 基于蓝图创建C++项目 # 添加C++类即可 创建蓝图项目的时间开销明显小于创建C++项目的时间开销 创建GameModeBase类 # Tools \u0026gt; New C++ Class.. STUGameModeBase 不设置类类型 Content同级目录出现C++ Classes文件夹 设置关卡使用STUGameModeBase # 查看项目源码中的版权信息 # 不使用预编译头文件 # ShootThemUp: ShootThemUp.Build.cs // PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs; PCHUsage = PCHUsageMode.NoPCHs; 脚本 # 编译项目 # Build.sh #!/bin/bash Project=\u0026quot;Projects/5.1.1/ShootThemUp/ShootThemUp.uproject\u0026quot; BuildScript=\u0026quot;EpicGames/UE_5.1/Engine/Build/BatchFiles/Mac/Build.sh\u0026quot; Target=\u0026quot;ShootThemUpEditor\u0026quot; $BuildScript $Target Mac Development $Project -waitmutex -NoHotReload 打开虚幻编辑器 # Editor.sh #!/bin/bash Project=\u0026quot;Projects/5.1.1/ShootThemUp/ShootThemUp.uproject\u0026quot; UnrealEditor=\u0026quot;EpicGames/UE_5.1/Engine/Binaries/Mac/UnrealEditor.app\u0026quot; open -a $UnrealEditor $Project 生成项目文件 # ProjectFiles.sh #!/bin/bash Project=\u0026quot;Projects/5.1.1/ShootThemUp/ShootThemUp.uproject\u0026quot; GenerateProjectFilesScript=\u0026quot;EpicGames/UE_5.1/Engine/Build/BatchFiles/Mac/GenerateProjectFiles.sh\u0026quot; EngineCCDst=\u0026quot;EpicGames/UE_5.1/compile_commands.json\u0026quot; EngineCCSrc=\u0026quot;EpicGames/UE_5.1/.vscode/compileCommands_Default.json\u0026quot; ProjectCCDst=\u0026quot;Projects/5.1.1/ShootThemUp/compile_commands.json\u0026quot; ProjectCCSrc=\u0026quot;Projects/5.1.1/ShootThemUp/.vscode/compileCommands_ShootThemUp.json\u0026quot; GenerateXCode() { $GenerateProjectFilesScript -projectfiles -project=$Project -game -rocket -progress -XCodeProjectFiles } GenerateVSCode() { $GenerateProjectFilesScript -projectfiles -project=$Project -game -rocket -progress -VSCode cp $EngineCCSrc $EngineCCDst cp $ProjectCCSrc $ProjectCCDst } # GenerateXCode GenerateVSCode "}),e.add({id:8,href:"/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/",title:"代码规范",description:"说明 # .clang-format .gitignore 虚幻引擎编码规范 - 大括号 放在新行 缩进 使用空格 缩进、制表符和空格 # 缩进 # indent 编写代码时，按下Tab键，会按制表符宽度留出空位，用以控制格式 使用制表符 Tab 和空格填充缩进 制表符的宽度可设置，不同平台制表符的宽度不一，视觉上，查看代码会有不习惯的感觉；可在本地设置使用空格，即用空格替换制表符 缩进使用空格 # 示例: 缩进使用空格, 制表符宽度 TabWidth 无效；缩进宽度 IndentWidth 生效, 一次缩进对应7个空格 IndentWidth: '7' UseTab: 'Never' TabWidth: '9' 缩进使用制表符和空格 # 若缩进宽度小于制表符宽度, 使用空格填充缩进; 若缩进宽度大于等于制表符宽度, 使用制表符和空格填充缩进 示例: 一次缩进对应7个空格，不会被替换为制表符；两个缩进对应14个空格，会被替换为1个制表符加5个空格 IndentWidth: '7' TabWidth: '9' UseTab: 'Always' 格式化代码规则 # .clang-format 官方文档 YAML标记文件 作为项目的一部分，描述管理代码文件的统一格式 每行遵循格式 key: value 设置受约束的开发语言 # Language: Cpp 如果项目中只一种开发语言，或者所有开发语言使用相同规范，可忽略该配置 通用样式 # Google: 一个制表符对应2个空格，大括号在行尾 BasedOnStyle: Google Microsoft: 一个制表符对应4个空格，大括号在新行 BasedOnStyle: Microsoft 制表符宽度 # 若缩进使用制表符，每6个空格替换一个制表符；当缩进宽度和制表符宽度不一致时，效果很糟糕 TabWidth: '6' 缩进宽度 # IndentWidth: '4' 缩进样式 # 空格 UseTab: Never 制表符: 源文件中既有空格又有制表符 UseTab: Always 设置大括号位置 # 行尾 BreakBeforeBraces: Attach 新行 BreakBeforeBraces: Allman 显示时, 每行最大字符个数 # 为0时，按输入的实际情况显示 ColumnLimit: '140' 向前缩进 # 控制访问说明符的缩进 AccessModifierOffset: '-4' 头文件排序 # SortIncludes: false 括号换行时，参数的对齐方式 # AlignAfterOpenBracket: Align 不对齐 DontAlign someLongFunction(argument1, argument2); 对齐 Align someLongFunction(argument1, argument2); 当语句较短时，是否允许写在单行 # AllowShortBlocksOnASingleLine: false 条件语句的执行部分为空，或只有一行语句时，可认为语句较短；为false则如下输出 while (true) { } while (true) { continue; } 当函数语句较短时，是否允许写在单行 # - Inline 若函数体为空，允许；若函数在类内定义，允许 InlineOnly 只允许一种情况：函数在类内定义 Empty 只允许一种情况：函数体为空 AllowShortFunctionsOnASingleLine: Inline 指针和引用的对齐方式 # PointerAlignment: Right Right int *a; Left int* a; Git仓库同步 # .",content:"说明 # .clang-format .gitignore 虚幻引擎编码规范 - 大括号 放在新行 缩进 使用空格 缩进、制表符和空格 # 缩进 # indent 编写代码时，按下Tab键，会按制表符宽度留出空位，用以控制格式 使用制表符 Tab 和空格填充缩进 制表符的宽度可设置，不同平台制表符的宽度不一，视觉上，查看代码会有不习惯的感觉；可在本地设置使用空格，即用空格替换制表符 缩进使用空格 # 示例: 缩进使用空格, 制表符宽度 TabWidth 无效；缩进宽度 IndentWidth 生效, 一次缩进对应7个空格 IndentWidth: '7' UseTab: 'Never' TabWidth: '9' 缩进使用制表符和空格 # 若缩进宽度小于制表符宽度, 使用空格填充缩进; 若缩进宽度大于等于制表符宽度, 使用制表符和空格填充缩进 示例: 一次缩进对应7个空格，不会被替换为制表符；两个缩进对应14个空格，会被替换为1个制表符加5个空格 IndentWidth: '7' TabWidth: '9' UseTab: 'Always' 格式化代码规则 # .clang-format 官方文档 YAML标记文件 作为项目的一部分，描述管理代码文件的统一格式 每行遵循格式 key: value 设置受约束的开发语言 # Language: Cpp 如果项目中只一种开发语言，或者所有开发语言使用相同规范，可忽略该配置 通用样式 # Google: 一个制表符对应2个空格，大括号在行尾 BasedOnStyle: Google Microsoft: 一个制表符对应4个空格，大括号在新行 BasedOnStyle: Microsoft 制表符宽度 # 若缩进使用制表符，每6个空格替换一个制表符；当缩进宽度和制表符宽度不一致时，效果很糟糕 TabWidth: '6' 缩进宽度 # IndentWidth: '4' 缩进样式 # 空格 UseTab: Never 制表符: 源文件中既有空格又有制表符 UseTab: Always 设置大括号位置 # 行尾 BreakBeforeBraces: Attach 新行 BreakBeforeBraces: Allman 显示时, 每行最大字符个数 # 为0时，按输入的实际情况显示 ColumnLimit: '140' 向前缩进 # 控制访问说明符的缩进 AccessModifierOffset: '-4' 头文件排序 # SortIncludes: false 括号换行时，参数的对齐方式 # AlignAfterOpenBracket: Align 不对齐 DontAlign someLongFunction(argument1, argument2); 对齐 Align someLongFunction(argument1, argument2); 当语句较短时，是否允许写在单行 # AllowShortBlocksOnASingleLine: false 条件语句的执行部分为空，或只有一行语句时，可认为语句较短；为false则如下输出 while (true) { } while (true) { continue; } 当函数语句较短时，是否允许写在单行 # - Inline 若函数体为空，允许；若函数在类内定义，允许 InlineOnly 只允许一种情况：函数在类内定义 Empty 只允许一种情况：函数体为空 AllowShortFunctionsOnASingleLine: Inline 指针和引用的对齐方式 # PointerAlignment: Right Right int *a; Left int* a; Git仓库同步 # .gitignore 虚幻引擎提供模板 告诉Git，同步时忽略的文件和文件夹 命名约定 # 虚幻编辑器 虚幻引擎命名规范参考 虚幻编辑器 材质 Material M_ 材质实例 Material Instance MI_ 基于C++的蓝图类 Blueprint BP_ 动画蓝图 Animation Blueprint ABP_ 混合空间(1D) Blend Space BS_ 动画剪辑 Animation Montage AM_ "}),e.add({id:9,href:"/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/%E4%B8%BA%E6%B8%B8%E6%88%8F%E8%A7%92%E8%89%B2%E7%BB%91%E5%AE%9A%E6%A8%A1%E5%9E%8B/",title:"为游戏角色绑定模型",description:"概览 # - 玩家控制的游戏角色 Character 游戏角色控制器 PlayerController 关卡设置 GameModeBase: DefaultPawnClass, PlayerControllerClass 第三视角 CameraComponent 创建Character类和PlayController类 # 虚幻编辑器 创建 Player/STUBaseCharacter ACharacter 公有类 创建 Player/STUPlayerController APlayerController 公有类 设置头文件搜索路径 # 源文件路径已包含上级文件夹 ShootThemUp: Player/STUBaseCharacter.cpp 设置头文件搜索路径之后，可以不指明上级文件夹 ShootThemUp: ShootThemUp.Build.cs PublicIncludePaths.AddRange(new string[] { \u0026quot;ShootThemUp/Public/Player\u0026quot; }); 设置STUGameModeBase使用STUBaseCharacter和STUPlayController # C++ - DefaultPawnClass 游戏角色类型 PlayerControllerClass 游戏角色控制器类型 添加默认构造函数声明 ShootThemUp: STUGameModeBase.h 设置默认游戏角色类型和游戏角色控制器类型 ShootThemUp: STUGameModeBase.cpp #include \u0026quot;Player/STUBaseCharacter.h\u0026quot; #include \u0026quot;Player/STUPlayerController.h\u0026quot; // 以下亦正确 // #include \u0026quot;STUBaseCharacter.h\u0026quot; // #include \u0026quot;STUPlayerController.h\u0026quot; ASTUGameModeBase::ASTUGameModeBase() { DefaultPawnClass = ASTUBaseCharacter::StaticClass(); PlayerControllerClass = ASTUPlayerController::StaticClass(); } 为游戏角色添加第三视角 # C++ 为STUBaseCharacter添加UCameraComponent类型成员 添加CameraComponent类型成员 ShootThemUp: Player/STUBaseCharacter.",content:"概览 # - 玩家控制的游戏角色 Character 游戏角色控制器 PlayerController 关卡设置 GameModeBase: DefaultPawnClass, PlayerControllerClass 第三视角 CameraComponent 创建Character类和PlayController类 # 虚幻编辑器 创建 Player/STUBaseCharacter ACharacter 公有类 创建 Player/STUPlayerController APlayerController 公有类 设置头文件搜索路径 # 源文件路径已包含上级文件夹 ShootThemUp: Player/STUBaseCharacter.cpp 设置头文件搜索路径之后，可以不指明上级文件夹 ShootThemUp: ShootThemUp.Build.cs PublicIncludePaths.AddRange(new string[] { \u0026quot;ShootThemUp/Public/Player\u0026quot; }); 设置STUGameModeBase使用STUBaseCharacter和STUPlayController # C++ - DefaultPawnClass 游戏角色类型 PlayerControllerClass 游戏角色控制器类型 添加默认构造函数声明 ShootThemUp: STUGameModeBase.h 设置默认游戏角色类型和游戏角色控制器类型 ShootThemUp: STUGameModeBase.cpp #include \u0026quot;Player/STUBaseCharacter.h\u0026quot; #include \u0026quot;Player/STUPlayerController.h\u0026quot; // 以下亦正确 // #include \u0026quot;STUBaseCharacter.h\u0026quot; // #include \u0026quot;STUPlayerController.h\u0026quot; ASTUGameModeBase::ASTUGameModeBase() { DefaultPawnClass = ASTUBaseCharacter::StaticClass(); PlayerControllerClass = ASTUPlayerController::StaticClass(); } 为游戏角色添加第三视角 # C++ 为STUBaseCharacter添加UCameraComponent类型成员 添加CameraComponent类型成员 ShootThemUp: Player/STUBaseCharacter.h // 前向声明 class UCameraComponent; // protected UPROPERTY(VisibleAnywhere, BlueprintReadWrite) UCameraComponent *CameraComponent; 初始化组件 ShootThemUp: Player/STUBaseCharacter.cpp #include \u0026quot;Camera/CameraComponent.h\u0026quot; // 默认构造函数 CameraComponent = CreateDefaultSubobject\u0026lt;UCameraComponent\u0026gt;(\u0026quot;CameraComponent\u0026quot;); CameraComponent-\u0026gt;SetupAttachment(GetRootComponent()); 编译ShootThemUp 设置关卡使用蓝图类 # 虚幻编辑器 查看STUGameModeBase使用的类型 # 创建基于STUGameModeBase的蓝图类 # 选中C++ Classes/ShootThemUp/STUGameModeBase右键, 选择Create blueprint class based on STUGameModeBase 保存到Content/, 命名为BP_STUBaseGameBase 创建基于STUBaseCharacter和STUPlayerController的蓝图类 # 创建 Content/Player 文件夹 创建 BP_STUBaseCharacter 和 BP_STUPlayerController , 保存到 Content/Player/ 设置关卡使用BP_STUGameModeBase, 并设置BP_STUGameModeBase使用BP_STUBaseCharacter和BP_STUPlayerController # 为游戏角色绑定模型 # 虚幻编辑器 BP_STUBaseCharacter 查看组件信息 # 说明 Capsule Component 根组件，实现碰撞检测 Arrow Component 角色的前进方向 Camera Component 第三视角 Mesh 骨骼网格体(Skeletal Mesh) Character Movement 纯逻辑组件，负责游戏角色运动 设置蓝图类编译成功自动保存 # 为Mesh组件绑定骨骼网格体 # Mesh 绑定 HeroTPP 材质自动应用 HeroTPP 移动模型到合适位置，旋转模型与前进方向一致 实现第三视角 分离 Camera Component 和 Mesh 组件 效果图 "}),e.add({id:10,href:"/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/%E5%AE%9E%E7%8E%B0%E6%B8%B8%E6%88%8F%E8%A7%92%E8%89%B2%E5%89%8D%E5%90%8E%E5%B7%A6%E5%8F%B3%E7%A7%BB%E5%8A%A8/",title:"实现游戏角色前后左右移动",description:"概览 # 举例 轴映射 连续 前后左右移动 动作映射 离散 跳跃，装弹，更换武器 绑定移动键位 # 虚幻编辑器 项目设置 \u0026gt; Engine \u0026gt; Input 轴映射 函数描述 键位 Scale MoveRight Left/A -1 Right/D 1 MoveForward Up/W 1 Down/S -1 实现前后左右移动逻辑 # C++ - 回调函数签名 BindAxis void handler(float Amount) 函数描述 回调函数 方向 输入处理 MoveForward MoveForward GetActorForwardVector AddMovementInput MoveRight MoveRight GetActorRightVector AddMovementInput 实现回调函数 ShootThemUp: Player/STUBaseCharacter.cpp #include \u0026quot;Components/InputComponent.h\u0026quot; void ASTUBaseCharacter::MoveForward(float Amount) { AddMovementInput(GetActorForwardVector(), Amount); } void ASTUBaseCharacter::MoveRight(float Amount) { AddMovementInput(GetActorRightVector(), Amount); } 绑定到函数描述 ShootThemUp: Player/STUBaseCharacter.",content:"概览 # 举例 轴映射 连续 前后左右移动 动作映射 离散 跳跃，装弹，更换武器 绑定移动键位 # 虚幻编辑器 项目设置 \u0026gt; Engine \u0026gt; Input 轴映射 函数描述 键位 Scale MoveRight Left/A -1 Right/D 1 MoveForward Up/W 1 Down/S -1 实现前后左右移动逻辑 # C++ - 回调函数签名 BindAxis void handler(float Amount) 函数描述 回调函数 方向 输入处理 MoveForward MoveForward GetActorForwardVector AddMovementInput MoveRight MoveRight GetActorRightVector AddMovementInput 实现回调函数 ShootThemUp: Player/STUBaseCharacter.cpp #include \u0026quot;Components/InputComponent.h\u0026quot; void ASTUBaseCharacter::MoveForward(float Amount) { AddMovementInput(GetActorForwardVector(), Amount); } void ASTUBaseCharacter::MoveRight(float Amount) { AddMovementInput(GetActorRightVector(), Amount); } 绑定到函数描述 ShootThemUp: Player/STUBaseCharacter.cpp // SetupPlayerInputComponent PlayerInputComponent-\u0026gt;BindAxis(\u0026quot;MoveForward\u0026quot;, this, \u0026amp;ASTUBaseCharacter::MoveForward); PlayerInputComponent-\u0026gt;BindAxis(\u0026quot;MoveRight\u0026quot;, this, \u0026amp;ASTUBaseCharacter::MoveRight); 添加函数声明 ShootThemUp: Player/STUBaseCharacter.h private 编译ShootThemUp "}),e.add({id:11,href:"/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/%E5%AE%9E%E7%8E%B0%E6%B8%B8%E6%88%8F%E8%A7%92%E8%89%B2%E8%A7%86%E8%A7%92%E6%97%8B%E8%BD%AC/",title:"实现游戏角色视角旋转",description:"说明 # 视角旋转 垂直方向 抬头低头 Camera绕Y轴旋转 鼠标垂直方向位移决定旋转角度 水平方向 环顾左右 Camera绕Z轴旋转 鼠标水平方向位移决定旋转角度 绑定旋转键位 # 虚幻编辑器 项目设置 \u0026gt; Engine \u0026gt; Input 轴映射 函数描述 键位 LookUp MouseY TurnAround MouseX 实现视角旋转逻辑 # C++ - 回调函数签名 BindAxis void handler(float Amount) 函数描述 回调函数 LookUp LookUp AddControllerPitchInput 绕Y轴旋转，增加Y轴旋转角度(Pitch) TurnAround TurnAround AddControllerYawInput 绕Z轴旋转，增加Z轴旋转角度(Yaw) 搭建框架 # 添加空函数 ShootThemUp: Player/STUBaseCharacter.cpp void ASTUBaseCharacter::LookUp(float Amount) {} void ASTUBaseCharacter::TurnAround(float Amount) {} 绑定函数描述和回调函数 ShootThemUp: Player/STUBaseCharacter.cpp // SetupPlayerInputComponent PlayerInputComponent-\u0026gt;BindAxis(\u0026quot;LookUp\u0026quot;, this, \u0026amp;ASTUBaseCharacter::LookUp); PlayerInputComponent-\u0026gt;BindAxis(\u0026quot;TurnAround\u0026quot;, this, \u0026amp;ASTUBaseCharacter::TurnAround); 添加函数声明 ShootThemUp: Player/STUBaseCharacter.",content:"说明 # 视角旋转 垂直方向 抬头低头 Camera绕Y轴旋转 鼠标垂直方向位移决定旋转角度 水平方向 环顾左右 Camera绕Z轴旋转 鼠标水平方向位移决定旋转角度 绑定旋转键位 # 虚幻编辑器 项目设置 \u0026gt; Engine \u0026gt; Input 轴映射 函数描述 键位 LookUp MouseY TurnAround MouseX 实现视角旋转逻辑 # C++ - 回调函数签名 BindAxis void handler(float Amount) 函数描述 回调函数 LookUp LookUp AddControllerPitchInput 绕Y轴旋转，增加Y轴旋转角度(Pitch) TurnAround TurnAround AddControllerYawInput 绕Z轴旋转，增加Z轴旋转角度(Yaw) 搭建框架 # 添加空函数 ShootThemUp: Player/STUBaseCharacter.cpp void ASTUBaseCharacter::LookUp(float Amount) {} void ASTUBaseCharacter::TurnAround(float Amount) {} 绑定函数描述和回调函数 ShootThemUp: Player/STUBaseCharacter.cpp // SetupPlayerInputComponent PlayerInputComponent-\u0026gt;BindAxis(\u0026quot;LookUp\u0026quot;, this, \u0026amp;ASTUBaseCharacter::LookUp); PlayerInputComponent-\u0026gt;BindAxis(\u0026quot;TurnAround\u0026quot;, this, \u0026amp;ASTUBaseCharacter::TurnAround); 添加函数声明 ShootThemUp: Player/STUBaseCharacter.h private 添加静态日志类型 # ShootThemUp: Player/STUBaseCharacter.cpp DEFINE_LOG_CATEGORY_STATIC(LogBaseCharacter, All, All); 实现回调函数 # ShootThemUp: Player/STUBaseCharacter.cpp void ASTUBaseCharacter::LookUp(float Amount) { AddControllerPitchInput(Amount); UE_LOG(LogBaseCharacter, Log, TEXT(\u0026quot;LookUp Amount: %f\u0026quot;), Amount); } void ASTUBaseCharacter::TurnAround(float Amount) { AddControllerYawInput(Amount); } 编译ShootThemUp并运行 # 视角可以在水平方向旋转, 身体跟随旋转 无法在垂直方向旋转 查看日志，鼠标向上移动时，Amount为正数 使视角可以在垂直方向旋转 # 虚幻编辑器 CameraComponent的UsePawnControlRotation选项 # 设置CamerComponent是否跟随Pawn旋转 勾选 BP_STUBaseCharacter \u0026gt; CameraComponent \u0026gt; UsePawnControlRotation 选中Camera Component \u0026gt; 细节面板 \u0026gt; CameraOptions \u0026gt; 勾选UsePawnControlRotation 编译并运行 向下移动鼠标，Camera向上旋转; 向上移动鼠标，Camera向下旋转 旋转中心点为CameraComponent PlayerController的InputPitchScale选项 # 游戏角色旋转的逻辑是通过旋转PlayerController完成的 游戏角色视角垂直方向旋转反向InputPitchScale有关，该参数默认为负数, 已退化 参考 InputPitchScale, InputYawScale, InputRollScale的绝对值对应旋转速度 引擎版本 5.1 之前，可以在 PlayerController蓝图类 的细节面板查看 InputPitchScale 打印InputPitchScale # 解决方法一: 将InputPitchScale设为正数 # 解决方法二: 将LookUp的Scale改为-1 # 善后 # 采用解决方法二 去除 BP_STUPlayerController 中的打印和InputPitchScale设置 去除 C++ LookUp 中的日志打印 游戏角色视角绕Z轴旋转时，使中心点为游戏角色 # 为STUBaseCharacter添加USpringArmComponent类型成员 # C++ 添加SpringArmComponent类型成员 ShootThemUp: Player/STUBaseCharacter.h // 前向声明 class USpringArmComponent; // protected UPROPERTY(VisibleAnywhere, BlueprintReadWrite) USpringArmComponent *SpringArmComponent; 初始化组件, 设置SpringArmComponent默认跟随Pawn旋转 ShootThemUp: Player/STUBaseCharacter.cpp #include \u0026quot;GameFrameWork/SpringArmComponent.h\u0026quot; // 默认构造函数 SpringArmComponent = CreateDefaultSubobject\u0026lt;USpringArmComponent\u0026gt;(\u0026quot;SpringArmComponent\u0026quot;); SpringArmComponent-\u0026gt;SetupAttachment(GetRootComponent()); SpringArmComponent-\u0026gt;bUsePawnControlRotation = true; 修改CameraComponent的上级组件为SpringArmComponent ShootThemUp: Player/STUBaseCharacter.cpp // 默认构造函数 // CameraComponent-\u0026gt;SetupAttachment(GetRootComponent()); CameraComponent-\u0026gt;SetupAttachment(SpringArmComponent); 编译ShootThemUp 配置SpringArmComponent # 虚幻编辑器 BP_STUBaseCharacter 查看SpringArmComponent和CameraComponent # 关于bUsePawnControlRotation设置 # UCameraComponent 和 USpringArmComponent 均有该数据成员 在代码中设置 bUsePawnControlRotation ，设置的是类数据成员初始值。在蓝图编辑器中，对基于C++类的蓝图类数据成员恢复默认值，得到类数据成员初始值 为参数添加默认值，不会改变参数已有值 清除CameraComponent的相对变换，置UsePawnControlRotation为false # 设置SpringArmComponent和CameraComponent的相对变换 # 查看 SpringArmComponent 臂长参数 设置CameraComponent相对SpringArmComponent的偏移 CameraComponent和SpringArmComponent的bUsePawnControlRotation生效问题 # - 二者均为 true SpringArmComponent的生效，Camera以游戏角色为中心绕Y轴旋转 二者均为 false Camera不可绕Y轴旋转 仅 CameraComponent 的为true 以Camera为中心绕Y轴旋转 仅 SpringArmComponent 的为true Camera以游戏角色为中心绕Y轴旋转 为Character绑定动画 # 虚幻编辑器 BP_STUBaseCharacter 绑定动画 选中Mesh组件 \u0026gt; Details \u0026gt; Animation - Animation Mode Use Animation Asset Anim To Play Run_Fwd 可能存在动画下拉框无可选项的情况, 需要重新为动画绑定骨骼网格体 编译并运行 优化视角旋转逻辑 # C++ STUBaseCharacter LookUp, TurnAround, AddControllerPitchInput和AddControllerYawInput的函数签名一致 void LookUp(float Amount); void TurnAround(float Amount); void AddControllerPitchInput(float Val); void AddControllerYawInput(float Val) 屏蔽 LookUp 和 TurnAround ShootThemUp: Player/STUBaseCharacter.cpp ShootThemUp: Player/STUBaseCharacter.h 函数描述直接绑定 AddControllerPitchInput 和 AddControllerYawInput ShootThemUp: Player/STUBaseCharacter.cpp // SetupPlayerInputComponent // PlayerInputComponent-\u0026gt;BindAxis(\u0026quot;LookUp\u0026quot;, this, \u0026amp;ASTUBaseCharacter::LookUp); // PlayerInputComponent-\u0026gt;BindAxis(\u0026quot;TurnAround\u0026quot;, this, \u0026amp;ASTUBaseCharacter::TurnAround); PlayerInputComponent-\u0026gt;BindAxis(\u0026quot;Lookup\u0026quot;, this, \u0026amp;ASTUBaseCharacter::AddControllerPitchInput); PlayerInputComponent-\u0026gt;BindAxis(\u0026quot;TurnAround\u0026quot;, this, \u0026amp;ASTUBaseCharacter::AddControllerYawInput) 编译并运行 "}),e.add({id:12,href:"/docs/%E5%88%86%E4%BA%AB/emacs/",title:"Emacs",description:"",content:""}),e.add({id:13,href:"/docs/",title:"笔记",description:"",content:""}),e.add({id:14,href:"/docs/brick/",title:"🧱",description:"",content:""}),e.add({id:15,href:"/docs/%E5%88%86%E4%BA%AB/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/",title:"开发语言",description:"",content:""}),e.add({id:16,href:"/docs/%E5%88%86%E4%BA%AB/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/",title:"开发工具",description:"",content:""}),e.add({id:17,href:"/docs/%E5%88%86%E4%BA%AB/macos/",title:"macOS",description:"",content:""}),e.add({id:18,href:"/docs/%E5%88%86%E4%BA%AB/hugo/",title:"Hugo",description:"",content:""}),e.add({id:19,href:"/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/",title:"虚幻引擎",description:"",content:""}),e.add({id:20,href:"/docs/%E5%88%86%E4%BA%AB/",title:"分享",description:"",content:""}),e.add({id:21,href:"/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/",title:"进阶课程",description:"",content:""}),e.add({id:22,href:"/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E8%A7%92%E8%89%B2%E5%92%8C%E5%8A%A8%E7%94%BB/",title:"角色和动画",description:"",content:""}),e.add({id:23,href:"/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E5%81%A5%E5%BA%B7%E7%B3%BB%E7%BB%9F/",title:"健康系统",description:"",content:""}),e.add({id:24,href:"/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E8%BF%9B%E9%98%B6%E8%AF%BE%E7%A8%8B/%E6%AD%A6%E5%99%A8/",title:"武器",description:"",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()