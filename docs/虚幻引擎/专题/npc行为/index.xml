<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NPC行为 on </title>
    <link>https://enjoy61.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E4%B8%93%E9%A2%98/npc%E8%A1%8C%E4%B8%BA/</link>
    <description>Recent content in NPC行为 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Oct 2023 12:09:46 +0000</lastBuildDate><atom:link href="https://enjoy61.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E4%B8%93%E9%A2%98/npc%E8%A1%8C%E4%B8%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NPC移动</title>
      <link>https://enjoy61.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E4%B8%93%E9%A2%98/npc%E8%A1%8C%E4%B8%BA/npc%E7%A7%BB%E5%8A%A8/</link>
      <pubDate>Sun, 29 Oct 2023 12:08:54 +0000</pubDate>
      
      <guid>https://enjoy61.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E4%B8%93%E9%A2%98/npc%E8%A1%8C%E4%B8%BA/npc%E7%A7%BB%E5%8A%A8/</guid>
      <description>设置NPC # 蓝图 # BP_STUAICharacter Details &amp;gt; Pawn 勾选 Auto Possess AI 设置 AI Controller Class C++ # STUAICharacter #include &amp;quot;AI/STUAIController.h&amp;quot; ASTUAICharacter::ASTUAICharacter(const FObjectInitializer &amp;amp;ObjInit) : Super(ObjInit) { AutoPossessAI = EAutoPossessAI::PlacedInWorldOrSpawned; AIControllerClass = ASTUAIController::StaticClass(); } 囊括NPC移动范围 # 使用NavMeshBoundsVolume标识NPC可移动区域 Place Actors &amp;gt; Volumes &amp;gt; NavMeshBoundsVolume 设置NavMeshBoundsVolume体积: 长宽高均要考虑设置 Details &amp;gt; Brush Settings 查看 按下 P 显示 / 隐藏 在 Unreal Editor &amp;gt; Preference &amp;gt; General &amp;gt; Keyboard Shortcuts &amp;gt; Show Flags Menu &amp;gt; Show Navigation 修改快捷键 方法一: 在AIController中使NPC移动 # 添加节点 AIMoveTo , 在 BeginPlay 后执行 方法二: 使用行为树和黑板资产 # 添加黑板变量 # BB_STUCharacter 添加Vector变量Location1和Location2 设置行为树 # BT_STUCharacter 设置匹配的黑板资产 # Details &amp;gt; BehaviorTree &amp;gt; Blackboard Asset 添加Sequence节点 # 为Sequence添加任务MoveTo 设置 Details &amp;gt; Blackboard &amp;gt; Blackboard Key 为 Location1 为Sequence添加任务Wait 设置 Details &amp;gt; Wait &amp;gt; Wait Time 为2 为Sequence添加任务MoveTo 设置 Details &amp;gt; Blackboard &amp;gt; Blackboard Key 为 Location2 为Sequence添加任务Wait 设置 Details &amp;gt; Wait &amp;gt; Wait Time 为2 设置黑板变量 # BP_STUAIController 添加节点: SetValueAsVector 添加节点: GetBlackboard; 获取黑板资产, 连到 SetValueAsVector &amp;gt; Target 添加节点: MakeLiteralName; 传入黑板变量名, 连到 SetValueAsVector &amp;gt; Key Name 设置Vector值 运行行为树 # 蓝图 # BP_STUAIController 添加节点: RunBehaviorTree; 在BeginPlay之后执行; 需设置BTAsset C++ # 添加属性: 保存行为树信息 STUAICharacter class UBehaviorTree; UPROPERTY(EditDefaultsOnly, BlueprintReadWrite) UBehaviorTree *BehaviorTreeAsset; 运行行为树 控制器每次切换控制Pawn, 执行对应的行为树 STUAIController #include &amp;quot;AI/STUAICharacter.</description>
    </item>
    
    <item>
      <title>自定义行为树任务</title>
      <link>https://enjoy61.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E4%B8%93%E9%A2%98/npc%E8%A1%8C%E4%B8%BA/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Sun, 29 Oct 2023 21:08:56 +0000</pubDate>
      
      <guid>https://enjoy61.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E4%B8%93%E9%A2%98/npc%E8%A1%8C%E4%B8%BA/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E4%B8%BA%E6%A0%91%E4%BB%BB%E5%8A%A1/</guid>
      <description>生成随机点, 并设置到黑板变量 说明 # 派生自C++类BTTaskNode 依赖模块 GameplayTasks 和 NavigationSystem 在构造函数中设置任务名 # STUNextLocationTask USTUNextLocationTask::USTUNextLocationTask() { NodeName = &amp;quot;Next Location&amp;quot;; } 任务逻辑 # 原型 # virtual EBTNodeResult::Type ExecuteTask(UBehaviorTreeComponent&amp;amp; OwnerComp, uint8* NodeMemory); 返回值 # 成功 return EBTNodeResult::Succeeded; 失败 return EBTNodeResult::Failed; 生成随机点 # #include &amp;quot;AIController.h&amp;quot; #include &amp;quot;NavigationSystem.h&amp;quot; const auto Controller = OwnerComp.GetAIOwner(); if (!Controller) return EBTNodeResult::Failed; const auto Pawn = Controller-&amp;gt;GetPawn(); if (!Pawn) return EBTNodeResult::Failed; const auto NavSys = UNavigationSystemV1::GetCurrent(Pawn); if (!NavSys) return EBTNodeResult::Failed; FNavLocation NavLocation; const auto Found = NavSys-&amp;gt;GetRandomReachablePointInRadius(Pawn-&amp;gt;GetActorLocation(), 1000, NavLocation); if (!</description>
    </item>
    
    <item>
      <title>NPC前进向量变化时自动插入旋转过渡</title>
      <link>https://enjoy61.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E4%B8%93%E9%A2%98/npc%E8%A1%8C%E4%B8%BA/npc%E5%89%8D%E8%BF%9B%E5%90%91%E9%87%8F%E5%8F%98%E5%8C%96%E6%97%B6%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5%E6%97%8B%E8%BD%AC%E8%BF%87%E6%B8%A1/</link>
      <pubDate>Sun, 29 Oct 2023 22:00:25 +0000</pubDate>
      
      <guid>https://enjoy61.github.io/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E4%B8%93%E9%A2%98/npc%E8%A1%8C%E4%B8%BA/npc%E5%89%8D%E8%BF%9B%E5%90%91%E9%87%8F%E5%8F%98%E5%8C%96%E6%97%B6%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5%E6%97%8B%E8%BD%AC%E8%BF%87%E6%B8%A1/</guid>
      <description>蓝图 # BP_STUAICharacter 游戏角色在水平方向旋转不再通过控制器控制 游戏角色旋转由控制器根据预期自行实现; 设置旋转插入比例 C++ # STUAICharacter FRotator中分量的顺序依次为: Pitch Y , Yaw Z , Roll X #include &amp;quot;GameFramework/CharacterMovementComponent.h&amp;quot; // ASTUAICharacter bUseControllerRotationYaw = false; if (GetCharacterMovement()) { GetCharacterMovement()-&amp;gt;bUseControllerDesiredRotation = true; GetCharacterMovement()-&amp;gt;RotationRate = FRotator(0.0f, 200.0f, 0.0f); } </description>
    </item>
    
  </channel>
</rss>
