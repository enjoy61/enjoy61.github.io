<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>动画蓝图 on </title>
    <link>https://www.enjoy61.com/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E4%B8%93%E9%A2%98/%E5%8A%A8%E7%94%BB%E8%93%9D%E5%9B%BE/</link>
    <description>Recent content in 动画蓝图 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 12 Sep 2023 16:17:52 +0000</lastBuildDate><atom:link href="https://www.enjoy61.com/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E4%B8%93%E9%A2%98/%E5%8A%A8%E7%94%BB%E8%93%9D%E5%9B%BE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>为轨道添加动画通知</title>
      <link>https://www.enjoy61.com/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E4%B8%93%E9%A2%98/%E5%8A%A8%E7%94%BB%E8%93%9D%E5%9B%BE/%E4%B8%BA%E8%BD%A8%E9%81%93%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB%E9%80%9A%E7%9F%A5/</link>
      <pubDate>Tue, 12 Sep 2023 16:16:52 +0000</pubDate>
      
      <guid>https://www.enjoy61.com/docs/%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E/%E4%B8%93%E9%A2%98/%E5%8A%A8%E7%94%BB%E8%93%9D%E5%9B%BE/%E4%B8%BA%E8%BD%A8%E9%81%93%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB%E9%80%9A%E7%9F%A5/</guid>
      <description>Track Animation Notify 便签 # - AnimNotify类 动画通知 AnimSequenceBase类 动画 动画通知 # 通常在动画通知中, 对事件进行处理 实现委托机制, 在AnimNotify中定义委托, 添加委托对象, 在Notify函数中通知客户端 ShootThemUp: Animations/STUAnimNotify.h DECLARE_MULTICAST_DELEGATE_OneParam(FOnNotifiedSignature, USkeletalMeshComponent*); UCLASS() class SHOOTTHEMUP_API USTUAnimNotify : public UAnimNotify { GENERATED_BODY() public: FOnNotifiedSignature OnNotified; virtual void Notify(USkeletalMeshComponent *MeshComp, UAnimSequenceBase *Animation, const FAnimNotifyEventReference&amp;amp; EventReference) override;	}; ShootThemUp: Animation/STUAnimNotify.cpp void USTUAnimNotify::Notify(USkeletalMeshComponent *MeshComp, UAnimSequenceBase *Animation, const FAnimNotifyEventReference&amp;amp; EventReference) { OnNotified.Broadcast(MeshComp); Super::Notify(MeshComp, Animation, EventReference); } 在轨道中添加通知事件 # 以动画剪辑为例 在通知所属轨道的合适位置右键, 添加指定类型通知 动画剪辑播放到事件所在帧时, 调用UAnimNotify::Notify 订阅委托服务 # 遍历给定动画的通知事件, 获取指针, 指向指定类型的通知对象 # ShootThemUp: Components/STUWeaponComponent.</description>
    </item>
    
  </channel>
</rss>
